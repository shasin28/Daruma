/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* create(vector<int>& preorder, vector<int>& inorder,int inS,int inE,int preS,int preE)
    {
        if(inS>inE)
            return NULL;
        TreeNode *root=new TreeNode(preorder[preS]);
        int rootindex;
        for(int i=inS;i<=inE;i++)
        {
            if(inorder[i]==root->val)
            {
                rootindex=i;break;
            }
        }
        int LinS=inS,LinE=rootindex-1,RinS=rootindex+1,RinE=inE,LpreS=preS+1,LpreE,RpreS,RpreE=preE;
        LpreE=LinE-LinS+LpreS;
        RpreS=LpreE+1;
        root->left=create(preorder,inorder,LinS,LinE,LpreS,LpreE);
        root->right=create(preorder,inorder,RinS,RinE,RpreS,RpreE);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return create(preorder,inorder,0,inorder.size()-1,0,preorder.size()-1);
        
    }
};
