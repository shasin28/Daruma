/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*,int>m;
    int rob(TreeNode* root) {
    if(!root)
        return 0;
        int ll=rob(root->left);
        int rr=rob(root->right);
        m[root->left]=ll;
        m[root->right]=rr;
     
        int gll=(root->left)?(root->left->left?m[root->left->left]:0)+(root->left->right?m[root->left->right]:0):0;
       int grr=(root->right)?(root->right->left?m[root->right->left]:0)+(root->right->right?m[root->right->right]:0):0;
        
        return max(root->val+gll+grr,ll+rr);
        
    }
};

//************************************ND

class Solution {
public:
    int rob(TreeNode* root) {
        return robDFS(root).second;
    }
    pair<int, int> robDFS(TreeNode* node){
        if( !node) return make_pair(0,0);
        auto l = robDFS(node->left);
        auto r = robDFS(node->right);
        int f2 = l.second + r.second;
        int f1 = max(f2, l.first + r.first + node->val);
        return make_pair(f2, f1);
    }
};
