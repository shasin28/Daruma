
//inorder traversal solution
void inorder(TreeNode* node, int& fid, int& k) {
    if (!node) return;
    inorder(node->left, fid, k);
    if (!k) return;
    fid = node->val;
    inorder(node->right, fid, --k);
}

int kthSmallest(TreeNode* root, int k) {
    int fid;
    inorder(root, fid, k);
    return fid;
}
//i didn't ----iterative
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode *> st;
        TreeNode *p = root;
        while(p || !st.empty())
        {
            while(p)
            {
                st.push(p);
                p = p->left;
            }
            p = st.top();
            if(--k == 0)
                return p->val;
            st.pop();
            p = p->right;
        }
        return 0;
    }
};
