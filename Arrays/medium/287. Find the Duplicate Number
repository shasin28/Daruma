//floyd cycle detection 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       int slow=nums[0],fast=nums[0];
        int n=nums.size();
        do
        {
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        fast=nums[0];
        while(slow!=fast)
        {
            fast=nums[fast];
            slow=nums[slow];
        }
        return slow;
        
    }
};

//nlogn solution is also possible: by using sorting
//binary search
class Solution {

public:

int findDuplicate(vector<int>& nums) {
    int n=nums.size()-1;
    int low=1;
    int high=n;
    int mid;
    while(low<high){
        mid=(low+high)/2;
        int count=0;
        for(int num:nums){
            if(num<=mid) count++;
        }
        if(count>mid) high=mid;
        else low=mid+1; 
    }
    return low;
}
};
