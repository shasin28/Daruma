class Solution {
public:
    int countSubstrings(string s) {
       int n=s.size(),count=n;
        bool dp[n][n];
        for(int i=0;i<n;i++)
            dp[i][i]=true;//all element with d=0
        //d is diagonal difference j-i
        for(int d=1;d<n;d++)
        {
            for(int i=0;i+d<n;i++)
            {
                int j=i+d;
                if(d==1)
                {
                    if(s[i]==s[j])
                    {
                        dp[i][j]=true;count++;
                    }
                    else
                        dp[i][j]=false;
                }
                else
                {
                    if(i+1<n&&j-1<n&&s[i]==s[j]&&dp[i+1][j-1]==true)
                    {
                        dp[i][j]=true;count++;
                    }
                    else
                        dp[i][j]=false;
                        
                }
            }
        }
        return count;
    }
};

//the one without dp
class Solution {
public:
    int res=0;
    
    int countSubstrings(string s) { 
        for(int i=0;i<s.size();i++)
            ispalindromic(s,i);
        return res;
    }
    
    void ispalindromic(string &s, int i){  // regards i as the center of palindromic
        for(int k=1;i-k+1>=0 && i+k-1<s.size() && s[i-k+1]==s[i+k-1];k++){ //cbabc
            res++;
        }
        
        for(int m=i,n=i+1;m>=0 && n<s.size() && s[m]==s[n]; m--,n++){ //abccba
            res++;
        }
    }
};
