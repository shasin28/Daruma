//my dp solution
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        int dp[n+1];
        dp[0]=0;dp[1]=nums[0];
        for(int i=2;i<=n;i++)
        {
            dp[i]=max(nums[i-1]+dp[i-2],dp[i-1]);
        }
        return dp[n];
    }
};
//sight variation for constant space
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        int tem1=0,tem2=nums[0],temp;
        for(int i=1;i<n;i++)
        {
            temp=tem2;
            tem2=max(nums[i]+tem1,tem2);
            tem1=temp;
        }
        return tem2;
    }
};
