class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
    unordered_map<int,int>m;
        int n=nums.size();
        for(int i=0;i<n;i++)
            m[nums[i]]++;
     /*   vector<pair<int,int>>v;
        for(auto u:m)
        {
            v.push_back({u.second,u.first});
            
        }
        sort(v.begin(),v.end());
        vector<int>ans(k);
        for(int i=0;i<k;i++)
            ans[i]=v[v.size()-1-i].second;
        return ans;
        */
        //using vector it was much slower---better priority q
        priority_queue<pair<int,int>>pq;
        for(auto u:m)
        {
            pq.push({u.second,u.first});
        }
        vector<int>ans(k);
        for(int i=0;i<k;i++)
        {
            ans[i]=pq.top().second;
            pq.pop();
        }
        return ans;
        
    }
};

//quickselect--hoare's selection
int partition(int left, int right, int pivot_index) {
    int pivot_frequency = this->count_map[this->unique[pivot_index]];
    // 1. move pivot to the end
    swap(this->unique[pivot_index], this->unique[right]);

    // 2. move all less frequent elements to the left
    int store_index = left;
    for (int i = left; i <= right; i++) {
        if (this->count_map[this->unique[i]] < pivot_frequency) {
            swap(this->unique[store_index], this->unique[i]);
            store_index += 1;
        }
    }

    // 3. move pivot to its final place
    swap(this->unique[right], this->unique[store_index]);

    return store_index;
}
//Bucket sort-----if n is less--for larger n values --no help
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> m;
        for (int num : nums)
            ++m[num];
        
        vector<vector<int>> buckets(nums.size() + 1); 
        for (auto p : m)
            buckets[p.second].push_back(p.first);
        
        vector<int> ans;
        for (int i = buckets.size() - 1; i >= 0 && ans.size() < k; --i) {
            for (int num : buckets[i]) {
                ans.push_back(num);
                if (ans.size() == k)
                    break;
            }
        }
        return ans;
    }
};
