//code:---dp
long long int catalan(int n)
{
    long long int cat[n + 1];
    cat[0] = cat[1] = 1;
    for (int i = 2; i <= n; i++) {
        cat[i] = 0;
        for (int j = 0; j < i; j++)
            cat[i] += cat[j] * cat[i - j - 1];
    }
 
    return cat[n];
}
 
***********************************************************************************************************************************
About catalan:


Catalan numbers are a sequence of natural numbers that occurs in many interesting counting problems like following.

Count the number of expressions containing n pairs of parentheses which are correctly matched. For n = 3, possible expressions are ((())), ()(()), ()()(), (())(), (()()).
Count the number of possible Binary Search Trees with n keys (See this)
Count the number of full binary trees (A rooted binary tree is full if every vertex has either two children or no children) with n+1 leaves.
Given a number n, return the number of ways you can draw n chords in a circle with 2 x n points such that no 2 chords intersect.
//see more applications:  https://www.geeksforgeeks.org/applications-of-catalan-numbers/


The first few Catalan numbers for n = 0, 1, 2, 3, â€¦ are 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862

c(0)=1; c(n+1)=summation of c(i)*c(n-i) where i varies from 0 to n----n>0

formula: c(n)=(2*n)!/(n+1)!*n!


