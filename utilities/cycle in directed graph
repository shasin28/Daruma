bool dfs(int u,vector<int>adj[],vector<bool>&vis,vector<bool>&vn)
{   
    if(!vis[u])
    {
        vis[u]=true;
        vn[u]=true;
    }
    for(auto k:adj[u])
    {
        if(!vis[k])
        {
           if( dfs(k,adj,vis,vn))
           return true;
        }
        else if(vn[k])
        return true;
    
    }
    vn[u]=false;
    return false;
    
}
bool isCyclic(int V, vector<int> adj[])
{
    vector<bool>vis(V,false);
    vector<bool>vn(V,false);//recursionStack for current recursive call
    for(int i=0;i<V;i++)
    {
    
        if(dfs(i,adj,vis,vn))
        return true;
    }
    return false;
  
}


int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int v, e;
	    cin >> v >> e;
	    
	    vector<int> adj[v];
	    
	    for(int i =0;i<e;i++){
	        int u, v;
	        cin >> u >> v;
	        adj[u].push_back(v);
	    }
	    
	    cout << isCyclic(v, adj) << endl;
	    
	}
	
	return 0;
}  
