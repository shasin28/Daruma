/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* find_mid(ListNode*head)
    {
        ListNode *fast=head->next,*slow=head;
        while(fast&&fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode*mid=slow->next;
        slow->next=NULL;
        return mid;
    }
    ListNode* merge(ListNode*left,ListNode*right)
    {
        ListNode *nakli=new ListNode(-1);
        ListNode *curr=nakli;
        while(left&&right)
        {
            if(left->val<=right->val)
            {
                curr->next=left;
                left=left->next;
            }
            else
            {
                curr->next=right;
                right=right->next;
            }
            curr=curr->next;
        }
        if(left)
            curr->next=left;
        else
            curr->next=right;
        return nakli->next;
    }
    ListNode* sortList(ListNode* head) {
        if(!head||!head->next)
            return head;
        ListNode *mid=find_mid(head);
        ListNode*left=sortList(head);
        ListNode*right=sortList(mid);
        return merge(left,right);
        
    }
};
