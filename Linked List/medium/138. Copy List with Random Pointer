//O(n) time and O(n) extra space
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)
            return NULL;
       unordered_map<Node*,Node*>mp;
        Node*temp=head;
        while(temp)
        {
            Node* nw=new Node(temp->val);
            mp[temp]=nw;
            temp=temp->next;
        }
        
        temp=head;
        while(temp)
        {
            mp[temp]->next=mp[temp->next];
            mp[temp]->random=mp[temp->random];
            temp=temp->next;
        }
            
            
        return mp[head];
        
       
    }
};
// O(1) extra space
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)
            return NULL;
        Node* temp=head;
        Node *cnext;
        while(temp)
        {
            Node *nw=new Node(temp->val);
            cnext=temp->next;
            temp->next=nw;
            nw->next=cnext;
            temp=cnext;     
        }
        
        temp=head;
        while(temp)
        {   if(temp->random)
            temp->next->random=temp->random->next;
         else
              temp->next->random=NULL;
             
            temp=temp->next->next;
        }
        temp=head;
        Node *nwhead=temp->next;
        while(temp)
        {
            cnext=temp->next->next;
            if(temp->next->next)
            temp->next->next=temp->next->next->next;
            temp->next=cnext;
            temp=cnext;
        }
        return nwhead;
        
    }
};
