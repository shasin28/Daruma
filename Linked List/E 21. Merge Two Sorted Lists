/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
      /*  //Solution :1->slower and complicated 
      if(!l1)
            return l2;
        if(!l2)
            return l1;
        ListNode *head=l1,*tem,*tem2;
        while(l1&&l2)
        {
                if(l1->val>l2->val)
                swap(l1->val,l2->val);
            else
            {
                while(l1->next&&l1->next->val<l2->val)
                    l1=l1->next;
            }
                tem=l1->next;
                l1->next=l2;
                l2=l2->next;
                l1=l1->next;
                l1->next=tem;
        }

        return head;*/
        ListNode *tem;
        ListNode *temp=new ListNode(INT_MIN);
        //or ListNode temp(INT_MIN);
        tem=temp;
        while(l1&&l2)
        {
            if(l1->val<l2->val)
            {
                tem->next=l1;
                l1=l1->next;
            }
            else
            {
                tem->next=l2;
                l2=l2->next;
            }
            tem=tem->next;
        }
        tem->next=l1?l1:l2;
        return temp->next;
        
    }
};
