class Solution {
public:
    bool dfs(vector<vector<char>>& board,int i,int j,int &m,int &n,string word,int bg)
    {
       if(bg==word.size())
           return true;
        if(i<0||i>=m||j<0||j>=n||word[bg]!=board[i][j])
            return false;

        char c=board[i][j];
        board[i][j]='*';
        bool ret=dfs(board,i+1,j,m,n,word,bg+1)||dfs(board,i-1,j,m,n,word,bg+1)||dfs(board,i,j+1,m,n,word,bg+1)||dfs(board,i,j-1,m,n,word,bg+1);
        board[i][j]=c;
        return ret;
        
        
    }
    bool exist(vector<vector<char>>& board, string word)
    {
        int m=board.size();
        int n=board[0].size();
      //  vector<vector<bool>>vis(m,vector<bool>(n,false));---not required
        int bg=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==word[bg])
                {
                     if(dfs(board,i,j,m,n,word,bg))
                         return true;
                }
            }
        }
        return false;
    }
};
//faster:124ms--almost twice faster than prev soln due to optimal recursion calls
class Solution {
private:
    bool dfs(vector<vector<char>>& board, int row, int col, const string &word, int start, int M, int N, int sLen)
    {
        char curC;
        bool res = false;
        if( (curC = board[row][col]) != word[start]) return false;
        if(start==sLen-1) return true;
        board[row][col] = '*';
        if(row>0) res = dfs(board, row-1, col, word, start+1, M, N, sLen);
        if(!res && row < M-1) res = dfs(board, row+1, col, word, start+1, M, N, sLen);
        if(!res && col > 0)   res = dfs(board, row, col-1, word, start+1, M, N, sLen);
        if(!res && col < N-1) res = dfs(board,  row, col+1, word, start+1, M, N, sLen);
        board[row][col] = curC;
        return res;
    }
    
public:
    bool exist(vector<vector<char>>& board, string word) {
        int M,N,i,j,sLen = word.size();
        if( (M=board.size()) && (N=board[0].size()) && sLen)
        {
            for(i=0; i<M; ++i)
                for(j=0; j<N; ++j)
                    if(dfs(board, i, j, word, 0, M, N, sLen)) return true;
        }
        return false;
    }
};
